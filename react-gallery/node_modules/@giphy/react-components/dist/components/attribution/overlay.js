"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var emotion_1 = require("emotion");
var react_1 = __importStar(require("react"));
var _1 = __importDefault(require("."));
var backgroundCss = emotion_1.css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n    background: linear-gradient(rgba(0, 0, 0, 0), rgba(18, 18, 18, 0.6));\n    cursor: default;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 70px;\n    pointer-events: none;\n"], ["\n    background: linear-gradient(rgba(0, 0, 0, 0), rgba(18, 18, 18, 0.6));\n    cursor: default;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 70px;\n    pointer-events: none;\n"])));
var attributionCss = emotion_1.css(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n    position: absolute;\n    bottom: 5px;\n    left: 5px;\n    right: 5px;\n"], ["\n    position: absolute;\n    bottom: 5px;\n    left: 5px;\n    right: 5px;\n"])));
var containerCss = emotion_1.css(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n    transition: opacity 150ms ease-in;\n"], ["\n    transition: opacity 150ms ease-in;\n"])));
var AttributionOverlay = function (_a) {
    var gif = _a.gif, isHovered = _a.isHovered;
    var hasHovered = react_1.useRef(isHovered);
    if (isHovered) {
        // not rendering to avoid loading the avatar until hover
        hasHovered.current = true;
    }
    return gif.user && hasHovered.current ? (react_1.default.createElement("div", { className: containerCss, style: { opacity: isHovered ? 1 : 0 } },
        react_1.default.createElement("div", { className: backgroundCss }),
        react_1.default.createElement(_1.default, { gif: gif, className: attributionCss }))) : null;
};
exports.default = AttributionOverlay;
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=overlay.js.map